{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from '../contexts/contactsProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const {\n    contacts\n  } = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  const formattedChats = chats.map(chat => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver;\n      });\n      const name = contact && contact.name || receiver;\n      return {\n        name\n      };\n    });\n  });\n  const value = {\n    chats: formattedChats,\n    createChat\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, children);\n}\n/*  2\nimport React, { useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\n\nconst ChatsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ id, children }) {\n  const [chats, setChats] = useLocalStorage('chats', [])\n  //const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n\n  function createChat(recipients) {\n    setChats(prevChats => {\n      return [...prevChats, { recipients, messages: [] }]\n    })\n  }\n\n  const formattedConversations = chats.map((chat, index) => {\n    const recipients = chat.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })})\n\n  const value = {\n    chats: formattedConversations,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n      {children}\n    </ChatsContext.Provider>\n  )\n}\n*/\n\n/*\nimport React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst [chats, setChats] = useLocalStorage('chats', []);\nconst {contacts} = useContacts();\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {login : receiver, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{displayedChats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n*/","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useLocalStorage","useContacts","ChatsContext","createContext","useChats","ChatsProvider","children","chats","setChats","contacts","createChat","receivers","prevChats","messages","formattedChats","map","chat","receiver","contact","find","login","name","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAAQC,WAAR,QAA0B,8BAA1B;AAEA,MAAMC,YAAY,GAAGJ,KAAK,CAACK,aAAN,EAArB;AAGA,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAOL,UAAU,CAACG,YAAD,CAAjB;AACD;AAED,OAAO,SAASG,aAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAmC;AAExC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,eAAe,CAAC,OAAD,EAAU,EAAV,CAAzC;AACA,QAAM;AAACS,IAAAA;AAAD,MAAaR,WAAW,EAA9B;;AAEA,WAASS,UAAT,CAAoBC,SAApB,EAA+B;AAC7BH,IAAAA,QAAQ,CAACI,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAACD,QAAAA,SAAD;AAAYE,QAAAA,QAAQ,EAAE;AAAtB,OAAf,CAAP;AACD,KAFO,CAAR;AAGD;;AAED,QAAMC,cAAc,GAAGP,KAAK,CAACQ,GAAN,CAAUC,IAAI,IAAI;AACvC,UAAML,SAAS,GAAGK,IAAI,CAACL,SAAL,CAAeI,GAAf,CAAmBE,QAAQ,IAAI;AAC/C,YAAMC,OAAO,GAAGT,QAAQ,CAACU,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAACE,KAAR,KAAkBH,QAAzB;AACD,OAFe,CAAhB;AAGF,YAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,QAA1C;AACA,aAAO;AAACI,QAAAA;AAAD,OAAP;AACC,KANiB,CAAlB;AAOD,GARsB,CAAvB;AAUA,QAAMC,KAAK,GAAG;AACZf,IAAAA,KAAK,EAAEO,cADK;AAEZJ,IAAAA;AAFY,GAAd;AAKA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEY,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACChB,QADD,CADF;AAKD;AAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA","sourcesContent":["import React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from '../contexts/contactsProvider'\n\nconst ChatsContext = React.createContext()\n\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const {contacts} = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  const formattedChats = chats.map(chat => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n    const name = (contact && contact.name) || receiver\n    return {name,}\n    })\n  })\n\n  const value = {\n    chats: formattedChats,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n\n/*  2\nimport React, { useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\n\nconst ChatsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ id, children }) {\n  const [chats, setChats] = useLocalStorage('chats', [])\n  //const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n\n  function createChat(recipients) {\n    setChats(prevChats => {\n      return [...prevChats, { recipients, messages: [] }]\n    })\n  }\n\n  const formattedConversations = chats.map((chat, index) => {\n    const recipients = chat.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })})\n\n  const value = {\n    chats: formattedConversations,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n      {children}\n    </ChatsContext.Provider>\n  )\n}\n*/\n\n\n/*\nimport React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst [chats, setChats] = useLocalStorage('chats', []);\nconst {contacts} = useContacts();\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {login : receiver, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{displayedChats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n*/\n\n\n\n"]},"metadata":{},"sourceType":"module"}