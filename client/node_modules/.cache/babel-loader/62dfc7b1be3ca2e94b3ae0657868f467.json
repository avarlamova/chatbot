{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/client/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\nimport { useSocket } from './socketProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  id,\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createChat(receivers) {\n    setChats(prevConversations => {\n      return [...prevConversations, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(({\n    receivers,\n    text,\n    sender\n  }) => {\n    setChats(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(chat => {\n        if (arrayEquality(chat.receivers, receivers)) {\n          madeChange = true;\n          return { ...chat,\n            messages: [...chat.messages, newMessage]\n          };\n        }\n\n        return chat;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          receivers,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setChats]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(receivers, text) {\n    socket.emit('send-message', {\n      receivers,\n      text\n    });\n    addMessageToConversation({\n      receivers,\n      text,\n      sender: id\n    });\n  }\n\n  const formattedConversations = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.id === receiver;\n      });\n      const name = contact && contact.name || receiver;\n      return {\n        id: receiver,\n        name\n      };\n    });\n    const messages = chat.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...chat,\n      messages,\n      receivers,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createChat\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/client/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ChatsContext","createContext","useChats","ChatsProvider","id","children","chats","setChats","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createChat","receivers","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","chat","arrayEquality","on","off","sendMessage","emit","formattedConversations","index","receiver","contact","find","name","message","fromMe","senderName","selected","value","conversations","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\nimport { useSocket } from './socketProvider';\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ id, children }) {\n  const [chats, setChats] = useLocalStorage('chats', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n  const socket = useSocket()\n\n  function createChat(receivers) {\n    setChats(prevConversations => {\n      return [...prevConversations, { receivers, messages: [] }]\n    })\n  }\n\n  const addMessageToConversation = useCallback(({ receivers, text, sender }) => {\n    setChats(prevConversations => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newConversations = prevConversations.map(chat => {\n        if (arrayEquality(chat.receivers, receivers)) {\n          madeChange = true\n          return {\n            ...chat,\n            messages: [...chat.messages, newMessage]\n          }\n        }\n\n        return chat\n      })\n\n      if (madeChange) {\n        return newConversations\n      } else {\n        return [\n          ...prevConversations,\n          { receivers, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setChats])\n\n  useEffect(() => {\n    if (socket == null) return\n    socket.on('receive-message', addMessageToConversation)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToConversation])\n\n  function sendMessage(receivers, text) {\n    socket.emit('send-message', { receivers, text })\n    addMessageToConversation({ receivers, text, sender: id })\n  }\n\n  const formattedConversations = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.id === receiver\n      })\n      const name = (contact && contact.name) || receiver\n      return { id: receiver, name }\n    })\n\n    const messages = chat.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    \n    const selected = index === selectedConversationIndex\n    return { ...chat, messages, receivers, selected }\n  })\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n      {children}\n    </ChatsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n"]},"metadata":{},"sourceType":"module"}