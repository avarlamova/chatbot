{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/client/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\nimport { useSocket } from './socketProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  login,\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [selectedChatIndex, setSelectedChatIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(({\n    receivers,\n    message,\n    sender\n  }) => {\n    setConversations(prevChats => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]); //will be called 1) from server when we receive a message 2) when we send a msg\n\n  const addMessageToChat = useCallback(({\n    receivers,\n    message,\n    sender\n  }) => {\n    setChats(prevChats => {\n      let hasChanged = false;\n      const newMessage = {\n        sender,\n        message\n      };\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers, receivers)) {\n          hasChanged = true;\n          return { ...chat,\n            messages: [...chat.messages, newMessage]\n          };\n        }\n\n        return chat;\n      });\n\n      if (hasChanged) {\n        return newChats;\n      } else {\n        return [...prevChats, {\n          receivers,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setChats]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToChat);\n    return () => {\n      socket.off('receive-message');\n    };\n  }, [socket, addMessageToChat]);\n\n  function sendMessage(receivers, message) {\n    socket.emit('send-message', {\n      receivers,\n      message\n    });\n    addMessageToChat({\n      receivers,\n      message,\n      sender: login\n    });\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver;\n      });\n      const name = contact && contact.name || receiver;\n      return {\n        login: receiver,\n        name\n      };\n    });\n    const messages = chat.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.login === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = login === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedChatIndex;\n    return { ...chat,\n      messages,\n      receivers,\n      selected\n    };\n  });\n  const value = {\n    chats: formattedChats,\n    selectedChat: formattedChats[selectedChatIndex],\n    sendMessage,\n    selectChat: setSelectedChatIndex,\n    createChat\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction equalArrays(arr1, arr2) {\n  if (arr1.length !== arr2.length) return false;\n  arr1.sort();\n  arr2.sort();\n  return arr1.every((element, index) => {\n    return element === arr2[index];\n  });\n}","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/client/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ChatsContext","createContext","useChats","ChatsProvider","login","children","chats","setChats","selectedChatIndex","setSelectedChatIndex","contacts","socket","createChat","receivers","prevChats","messages","addMessageToConversation","message","sender","setConversations","madeChange","newMessage","text","newConversations","prevConversations","map","conversation","arrayEquality","recipients","addMessageToChat","hasChanged","newChats","chat","equalArrays","on","off","sendMessage","emit","formattedChats","index","receiver","contact","find","name","fromMe","senderName","selected","value","selectedChat","selectChat","arr1","arr2","length","sort","every","element"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,WAAhD,QAAkE,OAAlE;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAAQC,WAAR,QAA0B,oBAA1B;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AAGA,MAAMC,YAAY,GAAGR,KAAK,CAACS,aAAN,EAArB;AAEA,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAOT,UAAU,CAACO,YAAD,CAAjB;AACD;AAED,OAAO,SAASG,aAAT,CAAuB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAvB,EAA4C;AACjD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,eAAe,CAAC,OAAD,EAAU,EAAV,CAAzC;AACA,QAAM,CAACW,iBAAD,EAAoBC,oBAApB,IAA4Cf,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAeZ,WAAW,EAAhC;AACA,QAAMa,MAAM,GAAGZ,SAAS,EAAxB;;AAEA,WAASa,UAAT,CAAoBC,SAApB,EAA+B;AAC7BN,IAAAA,QAAQ,CAACO,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAAED,QAAAA,SAAF;AAAaE,QAAAA,QAAQ,EAAE;AAAvB,OAAf,CAAP;AACD,KAFO,CAAR;AAGD;;AAED,QAAMC,wBAAwB,GAAGpB,WAAW,CAAC,CAAC;AAAEiB,IAAAA,SAAF;AAAaI,IAAAA,OAAb;AAAsBC,IAAAA;AAAtB,GAAD,KAAoC;AAC/EC,IAAAA,gBAAgB,CAACL,SAAS,IAAI;AAC5B,UAAIM,UAAU,GAAG,KAAjB;AACA,YAAMC,UAAU,GAAG;AAAEH,QAAAA,MAAF;AAAUI,QAAAA;AAAV,OAAnB;AACA,YAAMC,gBAAgB,GAAGC,iBAAiB,CAACC,GAAlB,CAAsBC,YAAY,IAAI;AAC7D,YAAIC,aAAa,CAACD,YAAY,CAACE,UAAd,EAA0BA,UAA1B,CAAjB,EAAwD;AACtDR,UAAAA,UAAU,GAAG,IAAb;AACA,iBAAO,EACL,GAAGM,YADE;AAELX,YAAAA,QAAQ,EAAE,CAAC,GAAGW,YAAY,CAACX,QAAjB,EAA2BM,UAA3B;AAFL,WAAP;AAID;;AAED,eAAOK,YAAP;AACD,OAVwB,CAAzB;;AAYA,UAAIN,UAAJ,EAAgB;AACd,eAAOG,gBAAP;AACD,OAFD,MAEO;AACL,eAAO,CACL,GAAGC,iBADE,EAEL;AAAEI,UAAAA,UAAF;AAAcb,UAAAA,QAAQ,EAAE,CAACM,UAAD;AAAxB,SAFK,CAAP;AAID;AACF,KAvBe,CAAhB;AAwBD,GAzB2C,EAyBzC,CAACF,gBAAD,CAzByC,CAA5C,CAZiD,CAuCnD;;AACE,QAAMU,gBAAgB,GAAGjC,WAAW,CAAE,CAAC;AAAEiB,IAAAA,SAAF;AAAaI,IAAAA,OAAb;AAAsBC,IAAAA;AAAtB,GAAD,KAAoC;AACxEX,IAAAA,QAAQ,CAACO,SAAS,IAAI;AACpB,UAAIgB,UAAU,GAAG,KAAjB;AACA,YAAMT,UAAU,GAAG;AAAEH,QAAAA,MAAF;AAAUD,QAAAA;AAAV,OAAnB;AACA,YAAMc,QAAQ,GAAGjB,SAAS,CAACW,GAAV,CAAcO,IAAI,IAAI;AACrC,YAAIC,WAAW,CAACD,IAAI,CAACnB,SAAN,EAAiBA,SAAjB,CAAf,EAA4C;AAC1CiB,UAAAA,UAAU,GAAG,IAAb;AACA,iBAAO,EACL,GAAGE,IADE;AAELjB,YAAAA,QAAQ,EAAE,CAAC,GAAGiB,IAAI,CAACjB,QAAT,EAAmBM,UAAnB;AAFL,WAAP;AAID;;AACD,eAAOW,IAAP;AACD,OATgB,CAAjB;;AAWA,UAAIF,UAAJ,EAAgB;AACd,eAAOC,QAAP;AACD,OAFD,MAEO;AACL,eAAO,CACL,GAAGjB,SADE,EAEL;AAAED,UAAAA,SAAF;AAAaE,UAAAA,QAAQ,EAAE,CAACM,UAAD;AAAvB,SAFK,CAAP;AAID;AACF,KAtBO,CAAR;AAuBD,GAxBmC,EAwBlC,CAACd,QAAD,CAxBkC,CAApC;AA0BAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,MAAM,IAAI,IAAd,EAAoB;AACpBA,IAAAA,MAAM,CAACuB,EAAP,CAAU,iBAAV,EAA6BL,gBAA7B;AAEA,WAAO,MAAM;AACXlB,MAAAA,MAAM,CAACwB,GAAP,CAAW,iBAAX;AACD,KAFD;AAGD,GAPQ,EAON,CAACxB,MAAD,EAASkB,gBAAT,CAPM,CAAT;;AASA,WAASO,WAAT,CAAqBvB,SAArB,EAAgCI,OAAhC,EAAyC;AACvCN,IAAAA,MAAM,CAAC0B,IAAP,CAAY,cAAZ,EAA2B;AAACxB,MAAAA,SAAD;AAAYI,MAAAA;AAAZ,KAA3B;AACAY,IAAAA,gBAAgB,CAAC;AAAEhB,MAAAA,SAAF;AAAaI,MAAAA,OAAb;AAAsBC,MAAAA,MAAM,EAAEd;AAA9B,KAAD,CAAhB;AACD;;AAED,QAAMkC,cAAc,GAAGhC,KAAK,CAACmB,GAAN,CAAU,CAACO,IAAD,EAAOO,KAAP,KAAiB;AAChD,UAAM1B,SAAS,GAAGmB,IAAI,CAACnB,SAAL,CAAeY,GAAf,CAAmBe,QAAQ,IAAI;AAC/C,YAAMC,OAAO,GAAG/B,QAAQ,CAACgC,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAACrC,KAAR,KAAkBoC,QAAzB;AACD,OAFe,CAAhB;AAGA,YAAMG,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6BH,QAA1C;AACA,aAAO;AAAEpC,QAAAA,KAAK,EAAEoC,QAAT;AAAmBG,QAAAA;AAAnB,OAAP;AACD,KANiB,CAAlB;AAQA,UAAM5B,QAAQ,GAAGiB,IAAI,CAACjB,QAAL,CAAcU,GAAd,CAAkBR,OAAO,IAAI;AAC5C,YAAMwB,OAAO,GAAG/B,QAAQ,CAACgC,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAACrC,KAAR,KAAkBa,OAAO,CAACC,MAAjC;AACD,OAFe,CAAhB;AAGA,YAAMyB,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6B1B,OAAO,CAACC,MAAlD;AACA,YAAM0B,MAAM,GAAGxC,KAAK,KAAKa,OAAO,CAACC,MAAjC;AACA,aAAO,EAAE,GAAGD,OAAL;AAAc4B,QAAAA,UAAU,EAAEF,IAA1B;AAAgCC,QAAAA;AAAhC,OAAP;AACD,KAPgB,CAAjB;AASA,UAAME,QAAQ,GAAGP,KAAK,KAAK/B,iBAA3B;AACA,WAAO,EAAE,GAAGwB,IAAL;AAAWjB,MAAAA,QAAX;AAAqBF,MAAAA,SAArB;AAAgCiC,MAAAA;AAAhC,KAAP;AACD,GApBsB,CAAvB;AAsBA,QAAMC,KAAK,GAAG;AACZzC,IAAAA,KAAK,EAAEgC,cADK;AAEZU,IAAAA,YAAY,EAAEV,cAAc,CAAC9B,iBAAD,CAFhB;AAGZ4B,IAAAA,WAHY;AAIZa,IAAAA,UAAU,EAAExC,oBAJA;AAKZG,IAAAA;AALY,GAAd;AAQA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEmC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG1C,QADH,CADF;AAKD;;AAED,SAAS4B,WAAT,CAAqBiB,IAArB,EAA2BC,IAA3B,EAAiC;AAC/B,MAAID,IAAI,CAACE,MAAL,KAAgBD,IAAI,CAACC,MAAzB,EAAiC,OAAO,KAAP;AACjCF,EAAAA,IAAI,CAACG,IAAL;AACAF,EAAAA,IAAI,CAACE,IAAL;AACA,SAAOH,IAAI,CAACI,KAAL,CAAW,CAACC,OAAD,EAAUhB,KAAV,KAAoB;AACpC,WAAOgB,OAAO,KAAKJ,IAAI,CAACZ,KAAD,CAAvB;AACD,GAFM,CAAP;AAGD","sourcesContent":["import React, {useContext, useState, useEffect, useCallback} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider';\nimport {useSocket} from './socketProvider'\n\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ login, children }) {\n  const [chats, setChats] = useLocalStorage('chats', [])\n  const [selectedChatIndex, setSelectedChatIndex] = useState(0)\n  const { contacts } = useContacts();\n  const socket = useSocket();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, { receivers, messages: [] }]\n    })\n  }\n\n  const addMessageToConversation = useCallback(({ receivers, message, sender }) => {\n    setConversations(prevChats => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          }\n        }\n\n        return conversation\n      })\n\n      if (madeChange) {\n        return newConversations\n      } else {\n        return [\n          ...prevConversations,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setConversations])\n\n//will be called 1) from server when we receive a message 2) when we send a msg\n  const addMessageToChat = useCallback (({ receivers, message, sender }) => {\n    setChats(prevChats => {\n      let hasChanged = false\n      const newMessage = { sender, message }\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers, receivers)) {\n          hasChanged = true\n          return {\n            ...chat,\n            messages: [...chat.messages, newMessage]\n          }\n        }\n        return chat\n      })\n\n      if (hasChanged) {\n        return newChats\n      } else {\n        return [\n          ...prevChats,\n          { receivers, messages: [newMessage] }\n        ]\n      }\n    })\n  },[setChats] )\n  \n  useEffect(() => {\n    if (socket == null) return \n    socket.on('receive-message', addMessageToChat)\n\n    return () => {\n      socket.off('receive-message')\n    }\n  }, [socket, addMessageToChat])\n\n  function sendMessage(receivers, message) {\n    socket.emit('send-message',{receivers, message})\n    addMessageToChat({ receivers, message, sender: login })\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n      const name = (contact && contact.name) || receiver\n      return { login: receiver, name }\n    })\n\n    const messages = chat.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.login === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = login === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    \n    const selected = index === selectedChatIndex\n    return { ...chat, messages, receivers, selected }\n  })\n\n  const value = {\n    chats: formattedChats,\n    selectedChat: formattedChats[selectedChatIndex],\n    sendMessage,\n    selectChat: setSelectedChatIndex,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n      {children}\n    </ChatsContext.Provider>\n  )\n}\n\nfunction equalArrays(arr1, arr2) {\n  if (arr1.length !== arr2.length) return false\n  arr1.sort()\n  arr2.sort()\n  return arr1.every((element, index) => {\n    return element === arr2[index]\n  })\n}"]},"metadata":{},"sourceType":"module"}