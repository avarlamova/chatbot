{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  children\n}) {\n  const contacts = useContacts();\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const displayedChats = chats.map(chat => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver;\n      });\n    });\n  });\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: {\n      chats,\n      createChat\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useLocalStorage","useContacts","ChatsContext","createContext","useChats","ChatsProvider","children","contacts","chats","setChats","displayedChats","map","chat","receivers","receiver","contact","find","login","createChat","prevChats","messages"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAAQC,WAAR,QAA0B,oBAA1B;AAEA,MAAMC,YAAY,GAAGJ,KAAK,CAACK,aAAN,EAArB;AAEA,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAOL,UAAU,CAACG,YAAD,CAAjB;AACD;AAED,OAAO,SAASG,aAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAmC;AAE1C,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBT,eAAe,CAAC,OAAD,EAAU,EAAV,CAAzC;AAEA,QAAMU,cAAc,GAAGF,KAAK,CAACG,GAAN,CAAUC,IAAI,IAAG;AACpC,UAAMC,SAAS,GAAGD,IAAI,CAACC,SAAL,CAAeF,GAAf,CAAoBG,QAAD,IAAa;AAC9C,YAAMC,OAAO,GAAGR,QAAQ,CAACS,IAAT,CAAcD,OAAO,IAAI;AACrC,eAAOA,OAAO,CAACE,KAAR,KAAkBH,QAAzB;AACH,OAFe,CAAhB;AAGH,KAJiB,CAAlB;AAKF,GANqB,CAAvB;;AAQE,WAASI,UAAT,CAAoBL,SAApB,EAA+B;AAC7BJ,IAAAA,QAAQ,CAACU,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAACN,QAAAA,SAAD;AAAYO,QAAAA,QAAQ,EAAE;AAAtB,OAAf,CAAP;AACD,KAFO,CAAR;AAGD;;AAED,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACZ,MAAAA,KAAD;AAAQU,MAAAA;AAAR,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCZ,QADD,CADF;AAKD","sourcesContent":["import React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({children}) {\n\nconst contacts = useContacts();\nconst [chats, setChats] = useLocalStorage('chats', [])\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        })  \n    });\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{chats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}