{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  login,\n  children\n}) {\n  const {\n    contacts\n  } = useContacts();\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const displayedChats = chats.map(chat => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver;\n      });\n      const name = contact && contact.login || receiver;\n      return {\n        id: login,\n        name\n      };\n    });\n    return { ...chat,\n      receivers\n    };\n  });\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  const value = {\n    chats: displayedChats\n    /*selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n    */\n\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: {\n      value,\n      createChat\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useLocalStorage","useContacts","ChatsContext","createContext","useChats","ChatsProvider","login","children","contacts","chats","setChats","displayedChats","map","chat","receivers","receiver","contact","find","name","id","createChat","prevChats","messages","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAAQC,WAAR,QAA0B,oBAA1B;AAEA,MAAMC,YAAY,GAAGJ,KAAK,CAACK,aAAN,EAArB;AAEA,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAOL,UAAU,CAACG,YAAD,CAAjB;AACD;AAED,OAAO,SAASG,aAAT,CAAuB;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAvB,EAA0C;AAEjD,QAAM;AAACC,IAAAA;AAAD,MAAaP,WAAW,EAA9B;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBV,eAAe,CAAC,OAAD,EAAU,EAAV,CAAzC;AAEA,QAAMW,cAAc,GAAGF,KAAK,CAACG,GAAN,CAAUC,IAAI,IAAG;AACpC,UAAMC,SAAS,GAAGD,IAAI,CAACC,SAAL,CAAeF,GAAf,CAAoBG,QAAD,IAAa;AAC9C,YAAMC,OAAO,GAAGR,QAAQ,CAACS,IAAT,CAAcD,OAAO,IAAI;AACrC,eAAOA,OAAO,CAACV,KAAR,KAAkBS,QAAzB;AACH,OAFe,CAAhB;AAGJ,YAAMG,IAAI,GAAIF,OAAO,IAAEA,OAAO,CAACV,KAAlB,IAA0BS,QAAvC;AACA,aAAO;AAACI,QAAAA,EAAE,EAAEb,KAAL;AAAYY,QAAAA;AAAZ,OAAP;AACC,KANiB,CAAlB;AAOA,WAAO,EAAC,GAAGL,IAAJ;AAAUC,MAAAA;AAAV,KAAP;AACF,GATqB,CAAvB;;AAWE,WAASM,UAAT,CAAoBN,SAApB,EAA+B;AAC7BJ,IAAAA,QAAQ,CAACW,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAACP,QAAAA,SAAD;AAAYQ,QAAAA,QAAQ,EAAE;AAAtB,OAAf,CAAP;AACD,KAFO,CAAR;AAGD;;AAED,QAAMC,KAAK,GAAG;AACZd,IAAAA,KAAK,EAAEE;AACP;;;;;;AAFY,GAAd;AAUA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACY,MAAAA,KAAD;AAAQH,MAAAA;AAAR,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCb,QADD,CADF;AAKD","sourcesContent":["import React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst {contacts} = useContacts();\nconst [chats, setChats] = useLocalStorage('chats', [])\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {id: login, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  const value = {\n    chats: displayedChats,\n    /*selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n    */\n  }\n\n\n  return (\n    <ChatsContext.Provider value={{value, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}