{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/localStorage';\nimport { useContacts } from './contactsProvider';\nconst ConversationsContext = React.createContext();\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(({\n    recipients,\n    text,\n    sender\n  }) => {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/React.createElement(ConversationsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n/*\nimport React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst [chats, setChats] = useLocalStorage('chats', []);\nconst {contacts} = useContacts();\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {login : receiver, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{displayedChats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n*/","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","useSocket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","on","off","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["\n\nimport React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/localStorage';\nimport { useContacts } from './contactsProvider';\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n  const socket = useSocket()\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, { recipients, messages: [] }]\n    })\n  }\n\n  const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\n    setConversations(prevConversations => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          }\n        }\n\n        return conversation\n      })\n\n      if (madeChange) {\n        return newConversations\n      } else {\n        return [\n          ...prevConversations,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setConversations])\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-message', addMessageToConversation)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToConversation])\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', { recipients, text })\n\n    addMessageToConversation({ recipients, text, sender: id })\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    \n    const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n  })\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  }\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\n\n\n/*\nimport React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst [chats, setChats] = useLocalStorage('chats', []);\nconst {contacts} = useContacts();\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {login : receiver, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{displayedChats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n*/\n\n\n\n"]},"metadata":{},"sourceType":"module"}