{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/client/src/components/conversationWindow.js\";\nimport React, { useState, useCallback } from 'react';\nimport { useChats } from '../contexts/chatsProvider';\nimport { Form, InputGroup, Button } from 'react-bootstrap';\nexport default function ConversationWindow() {\n  const [message, setMessage] = useState('');\n  const setRef = useCallback(node => {\n    if (node) {\n      node.scrollIntoView({\n        smooth: false\n      });\n    }\n  }, []);\n  const {\n    sendMessage,\n    selectedConversation\n  } = useChats();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    sendMessage(selectedConversation.recipients.map(r => r.login), message);\n    setMessage('');\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex flex-column flex-grow-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-grow-1 overflow-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex flex-column align-items-start justify-content-end px-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, selectedConversation ? selectedConversation.messages.map((msg, index) => {\n    const lastMessage = selectedConversation.messages.length - 1 === index;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: lastMessage ? setRef : null,\n      key: index,\n      className: `my-1 d-flex flex-column ${msg.fromMe ? 'align-self-end align-items-end' : 'align-items-start'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `rounded px-2 py-1 ${msg.fromMe ? 'bg-primary text-white' : 'border'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, msg.message), /*#__PURE__*/React.createElement(\"div\", {\n      className: `text-muted small ${msg.fromMe ? 'text-right' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }, msg.fromMe ? 'You' : msg.senderName));\n  }) : '')), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"m-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"textarea\",\n    required: true,\n    value: message,\n    onChange: e => setMessage(e.target.value),\n    style: {\n      height: '75px',\n      resize: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, \"Send\"))))));\n}","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/client/src/components/conversationWindow.js"],"names":["React","useState","useCallback","useChats","Form","InputGroup","Button","ConversationWindow","message","setMessage","setRef","node","scrollIntoView","smooth","sendMessage","selectedConversation","handleSubmit","e","preventDefault","recipients","map","r","login","messages","msg","index","lastMessage","length","fromMe","senderName","target","value","height","resize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA4C,OAA5C;AACA,SAAQC,QAAR,QAAuB,2BAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,MAA3B,QAAyC,iBAAzC;AAGA,eAAe,SAASC,kBAAT,GAA8B;AAE3C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMS,MAAM,GAAGR,WAAW,CAACS,IAAI,IAAI;AACjC,QAAIA,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACC,cAAL,CAAoB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAApB;AACD;AACF,GAJyB,EAIvB,EAJuB,CAA1B;AAKA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAwCZ,QAAQ,EAAtD;;AAEA,WAASa,YAAT,CAAsBC,CAAtB,EAAyB;AACvBA,IAAAA,CAAC,CAACC,cAAF;AACAJ,IAAAA,WAAW,CAACC,oBAAoB,CAACI,UAArB,CAAgCC,GAAhC,CAAoCC,CAAC,IAAIA,CAAC,CAACC,KAA3C,CAAD,EAAoDd,OAApD,CAAX;AACAC,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,+DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,oBAAoB,GAAGA,oBAAoB,CAACQ,QAArB,CAA8BH,GAA9B,CAAkC,CAACI,GAAD,EAAMC,KAAN,KAAgB;AACxE,UAAMC,WAAW,GAAGX,oBAAoB,CAACQ,QAArB,CAA8BI,MAA9B,GAAuC,CAAvC,KAA6CF,KAAjE;AACA,wBACE;AACE,MAAA,GAAG,EAAEC,WAAW,GAAGhB,MAAH,GAAY,IAD9B;AAEE,MAAA,GAAG,EAAEe,KAFP;AAGE,MAAA,SAAS,EAAG,2BAA0BD,GAAG,CAACI,MAAJ,GAAa,gCAAb,GAAgD,mBAAoB,EAH5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AACE,MAAA,SAAS,EAAG,qBAAoBJ,GAAG,CAACI,MAAJ,GAAa,uBAAb,GAAuC,QAAS,EADlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGJ,GAAG,CAAChB,OAFP,CALF,eASE;AAAK,MAAA,SAAS,EAAG,oBAAmBgB,GAAG,CAACI,MAAJ,GAAa,YAAb,GAA4B,EAAG,EAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,GAAG,CAACI,MAAJ,GAAa,KAAb,GAAqBJ,GAAG,CAACK,UAD5B,CATF,CADF;AAeD,GAjBuB,CAAH,GAiBhB,EAlBP,CADF,CADF,eAuBE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEb,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,EAAE,EAAC,UADL;AAEE,IAAA,QAAQ,MAFV;AAGE,IAAA,KAAK,EAAER,OAHT;AAIE,IAAA,QAAQ,EAAES,CAAC,IAAIR,UAAU,CAACQ,CAAC,CAACa,MAAF,CAASC,KAAV,CAJ3B;AAKE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,MAAM,EAAE;AAA1B,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQE,oBAAC,UAAD,CAAY,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CARF,CADF,CADF,CAvBF,CADF;AA0CD","sourcesContent":["import React, { useState, useCallback} from 'react'\nimport {useChats} from '../contexts/chatsProvider'\nimport { Form, InputGroup, Button } from 'react-bootstrap'\n\n\nexport default function ConversationWindow() {\n\n  const [message, setMessage] = useState('')\n  const setRef = useCallback(node => {\n    if (node) {\n      node.scrollIntoView({ smooth: false })\n    }\n  }, [])\n  const { sendMessage, selectedConversation } = useChats()\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    sendMessage(selectedConversation.recipients.map(r => r.login), message)\n    setMessage('')\n  }\n\n  return (\n    <div className=\"d-flex flex-column flex-grow-1\">\n      <div className=\"flex-grow-1 overflow-auto\">\n        <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\n          {selectedConversation ? selectedConversation.messages.map((msg, index) => {\n            const lastMessage = selectedConversation.messages.length - 1 === index\n            return (\n              <div\n                ref={lastMessage ? setRef : null}\n                key={index}\n                className={`my-1 d-flex flex-column ${msg.fromMe ? 'align-self-end align-items-end' : 'align-items-start'}`}\n              >\n                <div\n                  className={`rounded px-2 py-1 ${msg.fromMe ? 'bg-primary text-white' : 'border'}`}>\n                  {msg.message}\n                </div>\n                <div className={`text-muted small ${msg.fromMe ? 'text-right' : ''}`}>\n                  {msg.fromMe ? 'You' : msg.senderName}\n                </div>\n              </div>\n            )\n          }) : ''}\n        </div>\n      </div>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group className=\"m-2\">\n          <InputGroup>\n            <Form.Control\n              as=\"textarea\"\n              required\n              value={message}\n              onChange={e => setMessage(e.target.value)}\n              style={{ height: '75px', resize: 'none' }}\n            />\n            <InputGroup.Append>\n              <Button type=\"submit\">Send</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n      </Form>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}