{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('chats', []);\n\n  function createContact(login, name) {\n    setContacts(prevContacts => {\n      return [...prevContacts, {\n        login,\n        name\n      }];\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: {\n      chats,\n      createContact\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, children);\n}\n/*  2\nimport React, { useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\n\nconst ChatsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ id, children }) {\n  const [chats, setChats] = useLocalStorage('chats', [])\n  //const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n\n  function createChat(recipients) {\n    setChats(prevChats => {\n      return [...prevChats, { recipients, messages: [] }]\n    })\n  }\n\n  const formattedConversations = chats.map((chat, index) => {\n    const recipients = chat.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })})\n\n  const value = {\n    chats: formattedConversations,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n      {children}\n    </ChatsContext.Provider>\n  )\n}\n*/\n\n/*\nimport React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst [chats, setChats] = useLocalStorage('chats', []);\nconst {contacts} = useContacts();\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {login : receiver, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{displayedChats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n*/","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useLocalStorage","ChatsContext","createContext","useChats","ChatsProvider","children","chats","setChats","createContact","login","name","setContacts","prevContacts"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA,MAAMC,YAAY,GAAGH,KAAK,CAACI,aAAN,EAArB;AAGA,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAOJ,UAAU,CAACE,YAAD,CAAjB;AACD;AAED,OAAO,SAASG,aAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAmC;AAExC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,eAAe,CAAC,OAAD,EAAU,EAAV,CAAzC;;AAEA,WAASQ,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;AAClCC,IAAAA,WAAW,CAACC,YAAY,IAAI;AAC1B,aAAO,CAAC,GAAGA,YAAJ,EAAkB;AAACH,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAAlB,CAAP;AACD,KAFU,CAAX;AAGD;;AAED,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACJ,MAAAA,KAAD;AAAQE,MAAAA;AAAR,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCH,QADD,CADF;AAKD;AAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA","sourcesContent":["import React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\n\nconst ChatsContext = React.createContext()\n\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', [])\n\n  function createContact(login, name) {\n    setContacts(prevContacts => {\n      return [...prevContacts, {login, name}]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{chats, createContact}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n\n/*  2\nimport React, { useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\n\nconst ChatsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ id, children }) {\n  const [chats, setChats] = useLocalStorage('chats', [])\n  //const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n\n  function createChat(recipients) {\n    setChats(prevChats => {\n      return [...prevChats, { recipients, messages: [] }]\n    })\n  }\n\n  const formattedConversations = chats.map((chat, index) => {\n    const recipients = chat.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })})\n\n  const value = {\n    chats: formattedConversations,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n      {children}\n    </ChatsContext.Provider>\n  )\n}\n*/\n\n\n/*\nimport React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst [chats, setChats] = useLocalStorage('chats', []);\nconst {contacts} = useContacts();\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {login : receiver, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{displayedChats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n*/\n\n\n\n"]},"metadata":{},"sourceType":"module"}