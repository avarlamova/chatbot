{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\nconst ConversationsContext = React.createContext();\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex]\n  };\n  return /*#__PURE__*/React.createElement(ConversationsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, children);\n}\n/*\nimport React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst [chats, setChats] = useLocalStorage('chats', []);\nconst {contacts} = useContacts();\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {login : receiver, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{displayedChats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n*/","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","formattedConversations","map","conversation","index","recipient","contact","find","name","value","selectedConversation"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AAEA,MAAMC,oBAAoB,GAAGL,KAAK,CAACM,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AACjC,SAAON,UAAU,CAACI,oBAAD,CAAjB;AACD;AAED,OAAO,SAASG,qBAAT,CAA+B;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAA/B,EAAiD;AACtD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAzD;AACA,QAAM,CAACU,yBAAD,EAA4BC,4BAA5B,IAA4DZ,QAAQ,CAAC,CAAD,CAA1E;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAeX,WAAW,EAAhC;;AAEA,WAASY,kBAAT,CAA4BC,UAA5B,EAAwC;AACtCL,IAAAA,gBAAgB,CAACM,iBAAiB,IAAI;AACpC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAE;AAAxB,OAAvB,CAAP;AACD,KAFe,CAAhB;AAGD;;AAED,QAAMC,sBAAsB,GAAGT,aAAa,CAACU,GAAd,CAAkB,CAACC,YAAD,EAAeC,KAAf,KAAyB;AACxE,UAAMN,UAAU,GAAGK,YAAY,CAACL,UAAb,CAAwBI,GAAxB,CAA4BG,SAAS,IAAI;AAC1D,YAAMC,OAAO,GAAGV,QAAQ,CAACW,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAAChB,EAAR,KAAee,SAAtB;AACD,OAFe,CAAhB;AAGA,YAAMG,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6BH,SAA1C;AACA,aAAO;AAAEf,QAAAA,EAAE,EAAEe,SAAN;AAAiBG,QAAAA;AAAjB,OAAP;AACD,KANkB,CAAnB;AAMG,GAP0B,CAA/B;AASA,QAAMC,KAAK,GAAG;AACZjB,IAAAA,aAAa,EAAES,sBADH;AAEZS,IAAAA,oBAAoB,EAAET,sBAAsB,CAACP,yBAAD;AAFhC,GAAd;AAKA,sBACE,oBAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEe,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,QADH,CADF;AAKD;AAID","sourcesContent":["import React, { useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, { recipients, messages: [] }]\n    })\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })})\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n  }\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  )\n}\n\n\n\n/*\nimport React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst [chats, setChats] = useLocalStorage('chats', []);\nconst {contacts} = useContacts();\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {login : receiver, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{displayedChats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n*/\n\n\n\n"]},"metadata":{},"sourceType":"module"}