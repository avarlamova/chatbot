{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from '../contexts/contactsProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  login,\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('conversations', []);\n  const [selectedChat, setSelectedChat] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToChat = useCallback(({\n    receivers,\n    text,\n    sender\n  }) => {\n    setConversations(prevChats => {\n      let hasChanged = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newChats = prevChats.map(chat => {\n        if (arrayEquality(chat.receivers, receivers)) {\n          hasChanged = true;\n          return { ...chat,\n            messages: [...chat.messages, newMessage]\n          };\n        }\n\n        return chat;\n      });\n\n      if (hasChanged) {\n        return newChats;\n      } else {\n        return [...prevChats, {\n          receivers,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setChats]);\n\n  function sendMessage(receivers, text) {\n    addMessageToConversation({\n      receivers,\n      text,\n      sender: login\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/React.createElement(ConversationsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n/*\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {contacts} = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  function sendMessage (receivers, message) {\n    addMessageToChat({receivers,message, sender: login})\n  }\n\n  function equalArrays(arr1, arr2) {\n    if (arr1.length!==arr2.length) return false\n    arr1.sort();\n    arr2.sort();\n    return arr1.every((el, index) => {\n      return el === arr2[index]\n    })\n  }\n\n  function addMessageToChat({receivers, message, sender}) {\n    setChats(prevChats => {\n      const newMessage = {sender, message}\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers,receivers)) {\n          hasChanged = true\n          return {...chats, messages:[...chats.messages, newMessage]}\n        }\n        return chat\n\n      })\n      let hasChanged = false;\n      if (hasChanged) {\n        return newChats\n      }\n      else return [...prevChats, {receivers, messages: [newMessage]}]\n    })\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n    const name = (contact && contact.name) || receiver\n    return {login: receiver.login, name}\n    })\n    const isSelected = index === chatIndex\n    return {...chat, receivers, isSelected }\n  })\n\n  const messages = chat.messages.map(message => {\n    const contact = contacts.find(contact => {\n      return contact.login === message.sender\n    })\n    const name = (contact && contact.name) || message.sender\n    const isFromMe = login === message.sender\n    return { ...message, senderName: name, isFromMe }\n  })\n\n  const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n*/","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ChatsContext","createContext","useChats","ChatsProvider","login","children","chats","setChats","selectedChat","setSelectedChat","contacts","createChat","receivers","prevChats","messages","addMessageToChat","useCallback","text","sender","setConversations","hasChanged","newMessage","newChats","map","chat","arrayEquality","sendMessage","addMessageToConversation","formattedConversations","conversations","conversation","index","recipients","recipient","contact","find","id","name","message","fromMe","senderName","selected","selectedConversationIndex","value","selectedConversation","selectConversationIndex","setSelectedConversationIndex","createConversation","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from '../contexts/contactsProvider'\n\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ login, children }) {\n  const [chats, setChats] = useLocalStorage('conversations', [])\n  const [selectedChat, setSelectedChat] = useState(0)\n  const { contacts } = useContacts()\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, { receivers, messages: [] }]\n    })\n  }\n\n  const addMessageToChat = useCallback(({ receivers, text, sender }) => {\n    setConversations(prevChats => {\n      let hasChanged = false\n      const newMessage = { sender, text }\n      const newChats = prevChats.map(chat => {\n        if (arrayEquality(chat.receivers, receivers)) {\n          hasChanged = true\n          return {\n            ...chat,\n            messages: [...chat.messages, newMessage]\n          }\n        }\n\n        return chat\n      })\n\n      if (hasChanged) {\n        return newChats\n      } else {\n        return [\n          ...prevChats,\n          { receivers, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setChats])\n\n  function sendMessage(receivers, text) {\n    addMessageToConversation({ receivers, text, sender: login })\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    \n    const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n  })\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  }\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n/*\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {contacts} = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  function sendMessage (receivers, message) {\n    addMessageToChat({receivers,message, sender: login})\n  }\n\n  function equalArrays(arr1, arr2) {\n    if (arr1.length!==arr2.length) return false\n    arr1.sort();\n    arr2.sort();\n    return arr1.every((el, index) => {\n      return el === arr2[index]\n    })\n  }\n\n  function addMessageToChat({receivers, message, sender}) {\n    setChats(prevChats => {\n      const newMessage = {sender, message}\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers,receivers)) {\n          hasChanged = true\n          return {...chats, messages:[...chats.messages, newMessage]}\n        }\n        return chat\n\n      })\n      let hasChanged = false;\n      if (hasChanged) {\n        return newChats\n      }\n      else return [...prevChats, {receivers, messages: [newMessage]}]\n    })\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n    const name = (contact && contact.name) || receiver\n    return {login: receiver.login, name}\n    })\n    const isSelected = index === chatIndex\n    return {...chat, receivers, isSelected }\n  })\n\n  const messages = chat.messages.map(message => {\n    const contact = contacts.find(contact => {\n      return contact.login === message.sender\n    })\n    const name = (contact && contact.name) || message.sender\n    const isFromMe = login === message.sender\n    return { ...message, senderName: name, isFromMe }\n  })\n\n  const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}