{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from '../contexts/contactsProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  login,\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('conversations', []);\n  const [selectedChat, setSelectedChat] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToChat = (({\n    receivers,\n    text,\n    sender\n  }) => {\n    setChats(prevChats => {\n      let hasChanged = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newChats = prevChats.map(chat => {\n        if (arrayEquality(chat.receivers, receivers)) {\n          hasChanged = true;\n          return { ...chat,\n            messages: [...chat.messages, newMessage]\n          };\n        }\n\n        return chat;\n      });\n\n      if (hasChanged) {\n        return newChats;\n      } else {\n        return [...prevChats, {\n          receivers,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setChats]);\n\n  function sendMessage(receivers, text) {\n    addMessageToChat({\n      receivers,\n      text,\n      sender: login\n    });\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver;\n      });\n      const name = contact && contact.name || receiver;\n      return {\n        login: receiver,\n        name\n      };\n    });\n    const messages = chat.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.login === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = login === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedChat;\n    return { ...chat,\n      messages,\n      receivers,\n      selected\n    };\n  });\n  const value = {\n    chats: formattedChats,\n    selectedChat: formattedChats[selectedChat],\n    sendMessage,\n    selectedChat: setSelectedChat,\n    createChat\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n/*\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {contacts} = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  function sendMessage (receivers, message) {\n    addMessageToChat({receivers,message, sender: login})\n  }\n\n  function equalArrays(arr1, arr2) {\n    if (arr1.length!==arr2.length) return false\n    arr1.sort();\n    arr2.sort();\n    return arr1.every((el, index) => {\n      return el === arr2[index]\n    })\n  }\n\n  function addMessageToChat({receivers, message, sender}) {\n    setChats(prevChats => {\n      const newMessage = {sender, message}\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers,receivers)) {\n          hasChanged = true\n          return {...chats, messages:[...chats.messages, newMessage]}\n        }\n        return chat\n\n      })\n      let hasChanged = false;\n      if (hasChanged) {\n        return newChats\n      }\n      else return [...prevChats, {receivers, messages: [newMessage]}]\n    })\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n    const name = (contact && contact.name) || receiver\n    return {login: receiver.login, name}\n    })\n    const isSelected = index === chatIndex\n    return {...chat, receivers, isSelected }\n  })\n\n  const messages = chat.messages.map(message => {\n    const contact = contacts.find(contact => {\n      return contact.login === message.sender\n    })\n    const name = (contact && contact.name) || message.sender\n    const isFromMe = login === message.sender\n    return { ...message, senderName: name, isFromMe }\n  })\n\n  const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n*/","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ChatsContext","createContext","useChats","ChatsProvider","login","children","chats","setChats","selectedChat","setSelectedChat","contacts","createChat","receivers","prevChats","messages","addMessageToChat","text","sender","hasChanged","newMessage","newChats","map","chat","arrayEquality","sendMessage","formattedChats","index","receiver","contact","find","name","message","fromMe","senderName","selected","value","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from '../contexts/contactsProvider'\n\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ login, children }) {\n  const [chats, setChats] = useLocalStorage('conversations', [])\n  const [selectedChat, setSelectedChat] = useState(0)\n  const { contacts } = useContacts()\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, { receivers, messages: [] }]\n    })\n  }\n\n  const addMessageToChat = (({ receivers, text, sender }) => {\n    setChats(prevChats => {\n      let hasChanged = false\n      const newMessage = { sender, text }\n      const newChats = prevChats.map(chat => {\n        if (arrayEquality(chat.receivers, receivers)) {\n          hasChanged = true\n          return {\n            ...chat,\n            messages: [...chat.messages, newMessage]\n          }\n        }\n\n        return chat\n      })\n\n      if (hasChanged) {\n        return newChats\n      } else {\n        return [\n          ...prevChats,\n          { receivers, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setChats])\n\n  function sendMessage(receivers, text) {\n    addMessageToChat({ receivers, text, sender: login })\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n      const name = (contact && contact.name) || receiver\n      return { login: receiver, name }\n    })\n\n    const messages = chat.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.login === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = login === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    \n    const selected = index === selectedChat\n    return { ...chat, messages, receivers, selected }\n  })\n\n  const value = {\n    chats: formattedChats,\n    selectedChat: formattedChats[selectedChat],\n    sendMessage,\n    selectedChat: setSelectedChat,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n      {children}\n    </ChatsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n/*\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {contacts} = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  function sendMessage (receivers, message) {\n    addMessageToChat({receivers,message, sender: login})\n  }\n\n  function equalArrays(arr1, arr2) {\n    if (arr1.length!==arr2.length) return false\n    arr1.sort();\n    arr2.sort();\n    return arr1.every((el, index) => {\n      return el === arr2[index]\n    })\n  }\n\n  function addMessageToChat({receivers, message, sender}) {\n    setChats(prevChats => {\n      const newMessage = {sender, message}\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers,receivers)) {\n          hasChanged = true\n          return {...chats, messages:[...chats.messages, newMessage]}\n        }\n        return chat\n\n      })\n      let hasChanged = false;\n      if (hasChanged) {\n        return newChats\n      }\n      else return [...prevChats, {receivers, messages: [newMessage]}]\n    })\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n    const name = (contact && contact.name) || receiver\n    return {login: receiver.login, name}\n    })\n    const isSelected = index === chatIndex\n    return {...chat, receivers, isSelected }\n  })\n\n  const messages = chat.messages.map(message => {\n    const contact = contacts.find(contact => {\n      return contact.login === message.sender\n    })\n    const name = (contact && contact.name) || message.sender\n    const isFromMe = login === message.sender\n    return { ...message, senderName: name, isFromMe }\n  })\n\n  const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}