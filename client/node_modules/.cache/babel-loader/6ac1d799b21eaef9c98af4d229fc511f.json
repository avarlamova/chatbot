{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from '../contexts/contactsProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  function sendMessage(receivers, message) {}\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver;\n      });\n      const name = contact && contact.name || receiver;\n      return {\n        login: receiver.login,\n        name\n      };\n    });\n    const isSelected = index === chatIndex;\n    return { ...chat,\n      receivers,\n      isSelected\n    };\n  });\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ChatsContext","createContext","useChats","ChatsProvider","children","chats","setChats","chatIndex","setChatindex","contacts","createChat","receivers","prevChats","messages","sendMessage","message","formattedChats","map","chat","index","receiver","contact","find","login","name","isSelected","value","selectChat","selectedChat"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAAQC,WAAR,QAA0B,8BAA1B;AAEA,MAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,EAArB;AAEA,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAON,UAAU,CAACI,YAAD,CAAjB;AACD;AAED,OAAO,SAASG,aAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAmC;AAExC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,eAAe,CAAC,OAAD,EAAU,EAAV,CAAzC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM;AAACY,IAAAA;AAAD,MAAaV,WAAW,EAA9B;;AAEA,WAASW,UAAT,CAAoBC,SAApB,EAA+B;AAC7BL,IAAAA,QAAQ,CAACM,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAACD,QAAAA,SAAD;AAAYE,QAAAA,QAAQ,EAAE;AAAtB,OAAf,CAAP;AACD,KAFO,CAAR;AAGD;;AAED,WAASC,WAAT,CAAsBH,SAAtB,EAAiCI,OAAjC,EAA0C,CAEzC;;AAED,QAAMC,cAAc,GAAGX,KAAK,CAACY,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChD,UAAMR,SAAS,GAAGO,IAAI,CAACP,SAAL,CAAeM,GAAf,CAAmBG,QAAQ,IAAI;AAC/C,YAAMC,OAAO,GAAGZ,QAAQ,CAACa,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAACE,KAAR,KAAkBH,QAAzB;AACD,OAFe,CAAhB;AAGF,YAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,QAA1C;AACA,aAAO;AAACG,QAAAA,KAAK,EAAEH,QAAQ,CAACG,KAAjB;AAAwBC,QAAAA;AAAxB,OAAP;AACC,KANiB,CAAlB;AAOA,UAAMC,UAAU,GAAGN,KAAK,KAAKZ,SAA7B;AACA,WAAO,EAAC,GAAGW,IAAJ;AAAUP,MAAAA,SAAV;AAAqBc,MAAAA;AAArB,KAAP;AACD,GAVsB,CAAvB;AAYA,QAAMC,KAAK,GAAG;AACZrB,IAAAA,KAAK,EAAEW,cADK;AAEZW,IAAAA,UAAU,EAAEnB,YAFA;AAGZoB,IAAAA,YAAY,EAAEZ,cAAc,CAACT,SAAD,CAHhB;AAIZG,IAAAA,UAJY;AAKZI,IAAAA;AALY,GAAd;AAQA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEY,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCtB,QADD,CADF;AAKD","sourcesContent":["import React, {useContext, useState} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from '../contexts/contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {contacts} = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  function sendMessage (receivers, message) {\n\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n    const name = (contact && contact.name) || receiver\n    return {login: receiver.login, name}\n    })\n    const isSelected = index === chatIndex\n    return {...chat, receivers, isSelected }\n  })\n\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}