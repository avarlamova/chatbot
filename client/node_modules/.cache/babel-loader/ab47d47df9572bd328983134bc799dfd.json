{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/client/src/components/newchat.js\";\nimport React, { useState } from 'react';\nimport { useContacts } from '../contexts/contactsProvider';\nimport { useChats } from '../contexts/chatsProvider';\nimport { Modal, Form, Button } from 'react-bootstrap';\nexport default function NewChat({\n  closeModal\n}) {\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\n  const {\n    contacts\n  } = useContacts();\n  const {\n    createConversation\n  } = useChats();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    createConversation(selectedContactIds);\n    closeModal();\n  }\n\n  function handleCheckboxChange(contactId) {\n    setSelectedContactIds(prevSelectedContactIds => {\n      if (prevSelectedContactIds.includes(contactId)) {\n        return prevSelectedContactIds.filter(prevId => {\n          return contactId !== prevId;\n        });\n      } else {\n        return [...prevSelectedContactIds, contactId];\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"Create Conversation\"), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, contacts.map(contact => /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: contact.login,\n    key: contact.login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"checkbox\",\n    value: selectedContactIds.includes(contact.login),\n    label: contact.name,\n    onChange: () => handleCheckboxChange(contact.login),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"Create\"))));\n}\n/*\n    const {contacts} = useContacts();\n    const [selectedContactIds, setSelectedContactIds] = useState([])\n    const {createConversation} = useConversations();\n\n\n    function handleSubmit (e) {\n        e.preventDefault();\n        createConversation (selectedContactIds);\n        closeModal();\n    }\n\n    function handleChange (login) {\n      setSelectedContactIds(prevSelectedContacts => {\n            if (prevSelectedContacts.includes(login)) {\n              return prevSelectedContacts.filter(prevLogin => {\n                return login !== prevLogin\n              })\n            } else {\n              return [...prevSelectedContacts, login]\n            }\n          })\n    }\n\n    return (  \n        <>\n        <Modal.Header closeButton>\n                New chat\n            </Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={handleSubmit}>\n                {contacts.map (contact => (\n                    <Form.Group controlId={contact.login} key={contact.login}>\n                        <Form.Check \n                        type=\"checkbox\" \n                        label={contact.name} \n                        value={selectedContactIds.includes(contact.login)}\n                        onChange = {handleChange}>\n                        </Form.Check>\n                    </Form.Group>\n                ))}\n                <Button type=\"submit\"> Start the conversation </Button>\n                </Form>\n        </Modal.Body>\n    </>\n    )\n}*/","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/client/src/components/newchat.js"],"names":["React","useState","useContacts","useChats","Modal","Form","Button","NewChat","closeModal","selectedContactIds","setSelectedContactIds","contacts","createConversation","handleSubmit","e","preventDefault","handleCheckboxChange","contactId","prevSelectedContactIds","includes","filter","prevId","map","contact","login","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAQC,WAAR,QAA0B,8BAA1B;AACA,SAAQC,QAAR,QAAuB,2BAAvB;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,iBAApC;AAGA,eAAe,SAASC,OAAT,CAAiB;AAACC,EAAAA;AAAD,CAAjB,EAA+B;AAE5C,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CT,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAeT,WAAW,EAAhC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAyBT,QAAQ,EAAvC;;AAEA,WAASU,YAAT,CAAsBC,CAAtB,EAAyB;AACvBA,IAAAA,CAAC,CAACC,cAAF;AAEAH,IAAAA,kBAAkB,CAACH,kBAAD,CAAlB;AACAD,IAAAA,UAAU;AACX;;AAED,WAASQ,oBAAT,CAA8BC,SAA9B,EAAyC;AACvCP,IAAAA,qBAAqB,CAACQ,sBAAsB,IAAI;AAC9C,UAAIA,sBAAsB,CAACC,QAAvB,CAAgCF,SAAhC,CAAJ,EAAgD;AAC9C,eAAOC,sBAAsB,CAACE,MAAvB,CAA8BC,MAAM,IAAI;AAC7C,iBAAOJ,SAAS,KAAKI,MAArB;AACD,SAFM,CAAP;AAGD,OAJD,MAIO;AACL,eAAO,CAAC,GAAGH,sBAAJ,EAA4BD,SAA5B,CAAP;AACD;AACF,KARoB,CAArB;AASD;;AAED,sBACE,uDACE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEJ,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QAAQ,CAACW,GAAT,CAAaC,OAAO,iBACnB,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAEA,OAAO,CAACC,KAA/B;AAAsC,IAAA,GAAG,EAAED,OAAO,CAACC,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,KAAK,EAAEf,kBAAkB,CAACU,QAAnB,CAA4BI,OAAO,CAACC,KAApC,CAFT;AAGE,IAAA,KAAK,EAAED,OAAO,CAACE,IAHjB;AAIE,IAAA,QAAQ,EAAE,MAAMT,oBAAoB,CAACO,OAAO,CAACC,KAAT,CAJtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,CADH,eAWE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,CADF,CAFF,CADF;AAoBD;AAED","sourcesContent":["import React, { useState } from 'react'\nimport {useContacts} from '../contexts/contactsProvider'\nimport {useChats} from '../contexts/chatsProvider'\nimport { Modal, Form, Button } from 'react-bootstrap'\n \n\nexport default function NewChat({closeModal}) {\n\n  const [selectedContactIds, setSelectedContactIds] = useState([])\n  const { contacts } = useContacts()\n  const { createConversation } = useChats()\n\n  function handleSubmit(e) {\n    e.preventDefault()\n\n    createConversation(selectedContactIds)\n    closeModal()\n  }\n\n  function handleCheckboxChange(contactId) {\n    setSelectedContactIds(prevSelectedContactIds => {\n      if (prevSelectedContactIds.includes(contactId)) {\n        return prevSelectedContactIds.filter(prevId => {\n          return contactId !== prevId\n        })\n      } else {\n        return [...prevSelectedContactIds, contactId]\n      }\n    })\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton>Create Conversation</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          {contacts.map(contact => (\n            <Form.Group controlId={contact.login} key={contact.login}>\n              <Form.Check\n                type=\"checkbox\"\n                value={selectedContactIds.includes(contact.login)}\n                label={contact.name}\n                onChange={() => handleCheckboxChange(contact.login)}\n              />\n            </Form.Group>\n          ))}\n          <Button type=\"submit\">Create</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  )\n}\n\n/*\n    const {contacts} = useContacts();\n    const [selectedContactIds, setSelectedContactIds] = useState([])\n    const {createConversation} = useConversations();\n\n\n    function handleSubmit (e) {\n        e.preventDefault();\n        createConversation (selectedContactIds);\n        closeModal();\n    }\n\n    function handleChange (login) {\n      setSelectedContactIds(prevSelectedContacts => {\n            if (prevSelectedContacts.includes(login)) {\n              return prevSelectedContacts.filter(prevLogin => {\n                return login !== prevLogin\n              })\n            } else {\n              return [...prevSelectedContacts, login]\n            }\n          })\n    }\n\n    return (  \n        <>\n        <Modal.Header closeButton>\n                New chat\n            </Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={handleSubmit}>\n                {contacts.map (contact => (\n                    <Form.Group controlId={contact.login} key={contact.login}>\n                        <Form.Check \n                        type=\"checkbox\" \n                        label={contact.name} \n                        value={selectedContactIds.includes(contact.login)}\n                        onChange = {handleChange}>\n                        </Form.Check>\n                    </Form.Group>\n                ))}\n                <Button type=\"submit\"> Start the conversation </Button>\n                </Form>\n        </Modal.Body>\n    </>\n    )\n}*/\n"]},"metadata":{},"sourceType":"module"}