{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/client/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\nimport { useSocket } from './socketProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  login,\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createChat(recipients) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(({\n    recipients,\n    message,\n    sender\n  }) => {\n    setChats(prevChats => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        message\n      };\n      const newConversations = prevChats.map(chat => {\n        if (arrayEquality(chat.recipients, recipients)) {\n          madeChange = true;\n          return { ...chat,\n            messages: [...chat.messages, newMessage]\n          };\n        }\n\n        return chat;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevChats, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setChats]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipients, message) {\n    socket.emit('send-message', {\n      recipients,\n      message\n    });\n    addMessageToConversation({\n      recipients,\n      message,\n      sender: login\n    });\n  }\n\n  const formattedConversations = chats.map((chat, index) => {\n    const recipients = chat.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.login === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        login: recipient,\n        name\n      };\n    });\n    const messages = chat.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.login === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = login === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...chat,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    chats: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createChat\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/client/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ChatsContext","createContext","useChats","ChatsProvider","login","children","chats","setChats","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createChat","recipients","prevChats","messages","addMessageToConversation","message","sender","madeChange","newMessage","newConversations","map","chat","arrayEquality","on","off","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,WAAjD,QAAoE,OAApE;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,MAAMC,YAAY,GAAGR,KAAK,CAACS,aAAN,EAArB;AAEA,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAOT,UAAU,CAACO,YAAD,CAAjB;AACD;AAED,OAAO,SAASG,aAAT,CAAuB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAvB,EAA4C;AACjD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,eAAe,CAAC,OAAD,EAAU,EAAV,CAAzC;AACA,QAAM,CAACW,yBAAD,EAA4BC,4BAA5B,IAA4Df,QAAQ,CAAC,CAAD,CAA1E;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAeZ,WAAW,EAAhC;AACA,QAAMa,MAAM,GAAGZ,SAAS,EAAxB;;AAEA,WAASa,UAAT,CAAoBC,UAApB,EAAgC;AAC9BN,IAAAA,QAAQ,CAACO,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAE;AAAxB,OAAf,CAAP;AACD,KAFO,CAAR;AAGD;;AAED,QAAMC,wBAAwB,GAAGpB,WAAW,CAAC,CAAC;AAAEiB,IAAAA,UAAF;AAAcI,IAAAA,OAAd;AAAuBC,IAAAA;AAAvB,GAAD,KAAqC;AAChFX,IAAAA,QAAQ,CAACO,SAAS,IAAI;AACpB,UAAIK,UAAU,GAAG,KAAjB;AACA,YAAMC,UAAU,GAAG;AAAEF,QAAAA,MAAF;AAAUD,QAAAA;AAAV,OAAnB;AACA,YAAMI,gBAAgB,GAAGP,SAAS,CAACQ,GAAV,CAAcC,IAAI,IAAI;AAC7C,YAAIC,aAAa,CAACD,IAAI,CAACV,UAAN,EAAkBA,UAAlB,CAAjB,EAAgD;AAC9CM,UAAAA,UAAU,GAAG,IAAb;AACA,iBAAO,EACL,GAAGI,IADE;AAELR,YAAAA,QAAQ,EAAE,CAAC,GAAGQ,IAAI,CAACR,QAAT,EAAmBK,UAAnB;AAFL,WAAP;AAID;;AAED,eAAOG,IAAP;AACD,OAVwB,CAAzB;;AAYA,UAAIJ,UAAJ,EAAgB;AACd,eAAOE,gBAAP;AACD,OAFD,MAEO;AACL,eAAO,CACL,GAAGP,SADE,EAEL;AAAED,UAAAA,UAAF;AAAcE,UAAAA,QAAQ,EAAE,CAACK,UAAD;AAAxB,SAFK,CAAP;AAID;AACF,KAvBO,CAAR;AAwBD,GAzB2C,EAyBzC,CAACb,QAAD,CAzByC,CAA5C;AA2BAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,MAAM,IAAI,IAAd,EAAoB;AACpBA,IAAAA,MAAM,CAACc,EAAP,CAAU,iBAAV,EAA6BT,wBAA7B;AAEA,WAAO,MAAML,MAAM,CAACe,GAAP,CAAW,iBAAX,CAAb;AACD,GALQ,EAKN,CAACf,MAAD,EAASK,wBAAT,CALM,CAAT;;AAOA,WAASW,WAAT,CAAqBd,UAArB,EAAiCI,OAAjC,EAA0C;AACxCN,IAAAA,MAAM,CAACiB,IAAP,CAAY,cAAZ,EAA4B;AAAEf,MAAAA,UAAF;AAAcI,MAAAA;AAAd,KAA5B;AAEAD,IAAAA,wBAAwB,CAAC;AAAEH,MAAAA,UAAF;AAAcI,MAAAA,OAAd;AAAuBC,MAAAA,MAAM,EAAEd;AAA/B,KAAD,CAAxB;AACD;;AAED,QAAMyB,sBAAsB,GAAGvB,KAAK,CAACgB,GAAN,CAAU,CAACC,IAAD,EAAOO,KAAP,KAAiB;AACxD,UAAMjB,UAAU,GAAGU,IAAI,CAACV,UAAL,CAAgBS,GAAhB,CAAoBS,SAAS,IAAI;AAClD,YAAMC,OAAO,GAAGtB,QAAQ,CAACuB,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAAC5B,KAAR,KAAkB2B,SAAzB;AACD,OAFe,CAAhB;AAGA,YAAMG,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6BH,SAA1C;AACA,aAAO;AAAE3B,QAAAA,KAAK,EAAE2B,SAAT;AAAoBG,QAAAA;AAApB,OAAP;AACD,KANkB,CAAnB;AAQA,UAAMnB,QAAQ,GAAGQ,IAAI,CAACR,QAAL,CAAcO,GAAd,CAAkBL,OAAO,IAAI;AAC5C,YAAMe,OAAO,GAAGtB,QAAQ,CAACuB,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAAC5B,KAAR,KAAkBa,OAAO,CAACC,MAAjC;AACD,OAFe,CAAhB;AAGA,YAAMgB,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6BjB,OAAO,CAACC,MAAlD;AACA,YAAMiB,MAAM,GAAG/B,KAAK,KAAKa,OAAO,CAACC,MAAjC;AACA,aAAO,EAAE,GAAGD,OAAL;AAAcmB,QAAAA,UAAU,EAAEF,IAA1B;AAAgCC,QAAAA;AAAhC,OAAP;AACD,KAPgB,CAAjB;AASA,UAAME,QAAQ,GAAGP,KAAK,KAAKtB,yBAA3B;AACA,WAAO,EAAE,GAAGe,IAAL;AAAWR,MAAAA,QAAX;AAAqBF,MAAAA,UAArB;AAAiCwB,MAAAA;AAAjC,KAAP;AACD,GApB8B,CAA/B;AAsBA,QAAMC,KAAK,GAAG;AACZhC,IAAAA,KAAK,EAAEuB,sBADK;AAEZU,IAAAA,oBAAoB,EAAEV,sBAAsB,CAACrB,yBAAD,CAFhC;AAGZmB,IAAAA,WAHY;AAIZa,IAAAA,uBAAuB,EAAE/B,4BAJb;AAKZG,IAAAA;AALY,GAAd;AAQA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE0B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjC,QADH,CADF;AAKD;;AAED,SAASmB,aAAT,CAAuBiB,CAAvB,EAA0BC,CAA1B,EAA6B;AAC3B,MAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B,OAAO,KAAP;AAE3BF,EAAAA,CAAC,CAACG,IAAF;AACAF,EAAAA,CAAC,CAACE,IAAF;AAEA,SAAOH,CAAC,CAACI,KAAF,CAAQ,CAACC,OAAD,EAAUhB,KAAV,KAAoB;AACjC,WAAOgB,OAAO,KAAKJ,CAAC,CAACZ,KAAD,CAApB;AACD,GAFM,CAAP;AAGD","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\nimport { useSocket } from './socketProvider';\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ login, children }) {\n  const [chats, setChats] = useLocalStorage('chats', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n  const socket = useSocket()\n\n  function createChat(recipients) {\n    setChats(prevChats => {\n      return [...prevChats, { recipients, messages: [] }]\n    })\n  }\n\n  const addMessageToConversation = useCallback(({ recipients, message, sender }) => {\n    setChats(prevChats => {\n      let madeChange = false\n      const newMessage = { sender, message }\n      const newConversations = prevChats.map(chat => {\n        if (arrayEquality(chat.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...chat,\n            messages: [...chat.messages, newMessage]\n          }\n        }\n\n        return chat\n      })\n\n      if (madeChange) {\n        return newConversations\n      } else {\n        return [\n          ...prevChats,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setChats])\n\n  useEffect(() => {\n    if (socket == null) return\n    socket.on('receive-message', addMessageToConversation)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToConversation])\n\n  function sendMessage(recipients, message) {\n    socket.emit('send-message', { recipients, message })\n\n    addMessageToConversation({ recipients, message, sender: login })\n  }\n\n  const formattedConversations = chats.map((chat, index) => {\n    const recipients = chat.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.login === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { login: recipient, name }\n    })\n\n    const messages = chat.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.login === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = login === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    \n    const selected = index === selectedConversationIndex\n    return { ...chat, messages, recipients, selected }\n  })\n\n  const value = {\n    chats: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n      {children}\n    </ChatsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n"]},"metadata":{},"sourceType":"module"}