{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\nconst ChatsContext = React.createContext();\nexport function useConversations() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  id,\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('chats', []); //const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n\n  const {\n    contacts\n  } = useContacts();\n\n  function createChat(receiver) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  const formattedConversations = chats.map((chat, index) => {\n    const recipients = chats.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver;\n      });\n      const name = contact && contact.name || receiver;\n      return {\n        login: receiver,\n        name\n      };\n    });\n  });\n  const value = {\n    conversations: formattedConversations,\n    createChat\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, children);\n}\n/*\nimport React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst [chats, setChats] = useLocalStorage('chats', []);\nconst {contacts} = useContacts();\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {login : receiver, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{displayedChats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n*/","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ChatsContext","createContext","useConversations","ChatsProvider","id","children","chats","setChats","contacts","createChat","receiver","prevChats","receivers","messages","formattedConversations","map","chat","index","recipients","contact","find","login","name","value","conversations"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AAEA,MAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,EAArB;AAEA,OAAO,SAASC,gBAAT,GAA4B;AACjC,SAAON,UAAU,CAACI,YAAD,CAAjB;AACD;AAED,OAAO,SAASG,aAAT,CAAuB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAvB,EAAyC;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,eAAe,CAAC,OAAD,EAAU,EAAV,CAAzC,CAD8C,CAE9C;;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAeT,WAAW,EAAhC;;AAEA,WAASU,UAAT,CAAoBC,QAApB,EAA8B;AAC5BH,IAAAA,QAAQ,CAACI,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAAEC,QAAAA,SAAF;AAAaC,QAAAA,QAAQ,EAAE;AAAvB,OAAf,CAAP;AACD,KAFO,CAAR;AAGD;;AAED,QAAMC,sBAAsB,GAAGR,KAAK,CAACS,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxD,UAAMC,UAAU,GAAGZ,KAAK,CAACM,SAAN,CAAgBG,GAAhB,CAAoBL,QAAQ,IAAI;AACjD,YAAMS,OAAO,GAAGX,QAAQ,CAACY,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAACE,KAAR,KAAkBX,QAAzB;AACD,OAFe,CAAhB;AAGA,YAAMY,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BZ,QAA1C;AACA,aAAO;AAAEW,QAAAA,KAAK,EAAEX,QAAT;AAAmBY,QAAAA;AAAnB,OAAP;AACD,KANkB,CAAnB;AAMG,GAP0B,CAA/B;AASA,QAAMC,KAAK,GAAG;AACZC,IAAAA,aAAa,EAAEV,sBADH;AAEZL,IAAAA;AAFY,GAAd;AAKA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEc,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,QADH,CADF;AAKD;AAID","sourcesContent":["import React, { useContext, useState } from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\n\nconst ChatsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ id, children }) {\n  const [chats, setChats] = useLocalStorage('chats', [])\n  //const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n\n  function createChat(receiver) {\n    setChats(prevChats => {\n      return [...prevChats, { receivers, messages: [] }]\n    })\n  }\n\n  const formattedConversations = chats.map((chat, index) => {\n    const recipients = chats.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n      const name = (contact && contact.name) || receiver\n      return { login: receiver, name }\n    })})\n\n  const value = {\n    conversations: formattedConversations,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n      {children}\n    </ChatsContext.Provider>\n  )\n}\n\n\n\n/*\nimport React, {useContext} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\nconst [chats, setChats] = useLocalStorage('chats', []);\nconst {contacts} = useContacts();\n\nconst displayedChats = chats.map(chat=> {\n    const receivers = chat.receivers.map((receiver)=> {\n        const contact = contacts.find(contact => {\n            return contact.login === receiver\n        }) \n    const name = (contact&&contact.login)||receiver\n    return {login : receiver, name}\n    });\n    return {...chat, receivers }\n })\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  return (\n    <ChatsContext.Provider value={{displayedChats, createChat}}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n*/\n\n\n\n"]},"metadata":{},"sourceType":"module"}