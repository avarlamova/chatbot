{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/client/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from './contactsProvider';\nimport { useSocket } from './socketProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  login,\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [selectedChat, setSelectedChat] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  function equalArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    arr1.sort();\n    arr2.sort();\n    return arr1.every((element, index) => {\n      return element === arr2[index];\n    });\n  } //will be called 1) from server when we receive a message 2) when we send a msg\n\n\n  function addMessageToChat({\n    receivers,\n    message,\n    sender\n  }) {\n    setChats(prevChats => {\n      let hasChanged = false;\n      const newMessage = {\n        sender,\n        message\n      };\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers, receivers)) {\n          hasChanged = true;\n          return { ...chat,\n            messages: [...chat.messages, newMessage]\n          };\n        }\n\n        return chat;\n      });\n\n      if (hasChanged) {\n        return newChats;\n      } else {\n        return [...prevChats, {\n          receivers,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToChat);\n    effect;\n    return () => {\n      cleanup;\n    };\n  }, [input]);\n\n  function sendMessage(receivers, message) {\n    socket.emit('send-message', {\n      receivers,\n      message\n    });\n    addMessageToChat({\n      receivers,\n      message,\n      sender: login\n    });\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver;\n      });\n      const name = contact && contact.name || receiver;\n      return {\n        login: receiver,\n        name\n      };\n    });\n    const messages = chat.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.login === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = login === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedChat;\n    return { ...chat,\n      messages,\n      receivers,\n      selected\n    };\n  });\n  const value = {\n    chats: formattedChats,\n    selectedChat: formattedChats[selectedChat],\n    sendMessage,\n    selectChat: setSelectedChat,\n    createChat\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, children);\n}\n/*\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {contacts} = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  function sendMessage (receivers, message) {\n    addMessageToChat({receivers,message, sender: login})\n  }\n\n  function equalArrays(arr1, arr2) {\n    if (arr1.length!==arr2.length) return false\n    arr1.sort();\n    arr2.sort();\n    return arr1.every((el, index) => {\n      return el === arr2[index]\n    })\n  }\n\n  function addMessageToChat({receivers, message, sender}) {\n    setChats(prevChats => {\n      const newMessage = {sender, message}\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers,receivers)) {\n          hasChanged = true\n          return {...chats, messages:[...chats.messages, newMessage]}\n        }\n        return chat\n\n      })\n      let hasChanged = false;\n      if (hasChanged) {\n        return newChats\n      }\n      else return [...prevChats, {receivers, messages: [newMessage]}]\n    })\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n    const name = (contact && contact.name) || receiver\n    return {login: receiver.login, name}\n    })\n    const isSelected = index === chatIndex\n    return {...chat, receivers, isSelected }\n  })\n\n  const messages = chat.messages.map(message => {\n    const contact = contacts.find(contact => {\n      return contact.login === message.sender\n    })\n    const name = (contact && contact.name) || message.sender\n    const isFromMe = login === message.sender\n    return { ...message, senderName: name, isFromMe }\n  })\n\n  const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n*/","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/client/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useEffect","useLocalStorage","useContacts","useSocket","ChatsContext","createContext","useChats","ChatsProvider","login","children","chats","setChats","selectedChat","setSelectedChat","contacts","socket","createChat","receivers","prevChats","messages","equalArrays","arr1","arr2","length","sort","every","element","index","addMessageToChat","message","sender","hasChanged","newMessage","newChats","map","chat","on","effect","cleanup","input","sendMessage","emit","formattedChats","receiver","contact","find","name","fromMe","senderName","selected","value","selectChat"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from './contactsProvider';\nimport {useSocket} from './socketProvider'\n\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({ login, children }) {\n  const [chats, setChats] = useLocalStorage('chats', [])\n  const [selectedChat, setSelectedChat] = useState(0)\n  const { contacts } = useContacts();\n  const socket = useSocket();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, { receivers, messages: [] }]\n    })\n  }\n\n  function equalArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false\n    arr1.sort()\n    arr2.sort()\n    return arr1.every((element, index) => {\n      return element === arr2[index]\n    })\n  }\n//will be called 1) from server when we receive a message 2) when we send a msg\n  function addMessageToChat ({ receivers, message, sender }) {\n    setChats(prevChats => {\n      let hasChanged = false\n      const newMessage = { sender, message }\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers, receivers)) {\n          hasChanged = true\n          return {\n            ...chat,\n            messages: [...chat.messages, newMessage]\n          }\n        }\n        return chat\n      })\n\n      if (hasChanged) {\n        return newChats\n      } else {\n        return [\n          ...prevChats,\n          { receivers, messages: [newMessage] }\n        ]\n      }\n    })\n  }\n  \n  useEffect(() => {\n    if (socket == null) return \n    socket.on('receive-message', addMessageToChat)\n    effect\n    return () => {\n      cleanup\n    }\n  }, [input])\n\n  function sendMessage(receivers, message) {\n    socket.emit('send-message',{receivers, message})\n    addMessageToChat({ receivers, message, sender: login })\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n      const name = (contact && contact.name) || receiver\n      return { login: receiver, name }\n    })\n\n    const messages = chat.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.login === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = login === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    \n    const selected = index === selectedChat\n    return { ...chat, messages, receivers, selected }\n  })\n\n  const value = {\n    chats: formattedChats,\n    selectedChat: formattedChats[selectedChat],\n    sendMessage,\n    selectChat: setSelectedChat,\n    createChat\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n      {children}\n    </ChatsContext.Provider>\n  )\n}\n\n\n/*\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {contacts} = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  function sendMessage (receivers, message) {\n    addMessageToChat({receivers,message, sender: login})\n  }\n\n  function equalArrays(arr1, arr2) {\n    if (arr1.length!==arr2.length) return false\n    arr1.sort();\n    arr2.sort();\n    return arr1.every((el, index) => {\n      return el === arr2[index]\n    })\n  }\n\n  function addMessageToChat({receivers, message, sender}) {\n    setChats(prevChats => {\n      const newMessage = {sender, message}\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers,receivers)) {\n          hasChanged = true\n          return {...chats, messages:[...chats.messages, newMessage]}\n        }\n        return chat\n\n      })\n      let hasChanged = false;\n      if (hasChanged) {\n        return newChats\n      }\n      else return [...prevChats, {receivers, messages: [newMessage]}]\n    })\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n    const name = (contact && contact.name) || receiver\n    return {login: receiver.login, name}\n    })\n    const isSelected = index === chatIndex\n    return {...chat, receivers, isSelected }\n  })\n\n  const messages = chat.messages.map(message => {\n    const contact = contacts.find(contact => {\n      return contact.login === message.sender\n    })\n    const name = (contact && contact.name) || message.sender\n    const isFromMe = login === message.sender\n    return { ...message, senderName: name, isFromMe }\n  })\n\n  const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}