{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/client/src/contexts/contactsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nconst ContactsContext = React.createContext();\nexport function useContacts() {\n  return useContext(ContactsContext);\n}\nexport function ContactsProvider({\n  children\n}) {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [selectedContactIndex, setSelectedContactIndex] = useState(0);\n  const selected = index === selectedContactIndex;\n\n  function createContact(login, name) {\n    setContacts(prevContacts => {\n      return [...prevContacts, {\n        login,\n        name\n      }];\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ContactsContext.Provider, {\n    value: {\n      contacts,\n      createContact,\n      selectedContactIndex,\n      selectedContact: contacts[selectedContactIndex]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/client/src/contexts/contactsProvider.js"],"names":["React","useContext","useState","useLocalStorage","ContactsContext","createContext","useContacts","ContactsProvider","children","contacts","setContacts","selectedContactIndex","setSelectedContactIndex","selected","index","createContact","login","name","prevContacts","selectedContact"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA,MAAMC,eAAe,GAAGJ,KAAK,CAACK,aAAN,EAAxB;AAGA,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAOL,UAAU,CAACG,eAAD,CAAjB;AACD;AAED,OAAO,SAASG,gBAAT,CAA0B;AAACC,EAAAA;AAAD,CAA1B,EAAsC;AAE3C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,eAAe,CAAC,UAAD,EAAa,EAAb,CAA/C;AACA,QAAM,CAACQ,oBAAD,EAAuBC,uBAAvB,IAAkDV,QAAQ,CAAC,CAAD,CAAhE;AAEA,QAAMW,QAAQ,GAAGC,KAAK,KAAKH,oBAA3B;;AAEA,WAASI,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;AAClCP,IAAAA,WAAW,CAACQ,YAAY,IAAI;AAC1B,aAAO,CAAC,GAAGA,YAAJ,EAAkB;AAACF,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAAlB,CAAP;AACD,KAFU,CAAX;AAGD;;AAGD,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAACR,MAAAA,QAAD;AAAWM,MAAAA,aAAX;AAA0BJ,MAAAA,oBAA1B;AAAgDQ,MAAAA,eAAe,EAAEV,QAAQ,CAACE,oBAAD;AAAzE,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCH,QADD,CADF;AAKD","sourcesContent":["import React, {useContext, useState} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\n\nconst ContactsContext = React.createContext()\n\n\nexport function useContacts() {\n  return useContext(ContactsContext)\n}\n\nexport function ContactsProvider({children}) {\n\n  const [contacts, setContacts] = useLocalStorage('contacts', [])\n  const [selectedContactIndex, setSelectedContactIndex] = useState(0)\n\n  const selected = index === selectedContactIndex\n\n  function createContact(login, name) {\n    setContacts(prevContacts => {\n      return [...prevContacts, {login, name}]\n    })\n  }\n\n\n  return (\n    <ContactsContext.Provider value={{contacts, createContact, selectedContactIndex, selectedContact: contacts[selectedContactIndex]}}>\n    {children}\n    </ContactsContext.Provider>  \n  )\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}