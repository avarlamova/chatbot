{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from '../contexts/contactsProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  login,\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  function sendMessage(receivers, message) {\n    addMessageToChat({\n      receivers,\n      message,\n      sender: login\n    });\n  }\n\n  function addMessageToChat({\n    receivers,\n    message,\n    sender: login\n  }) {\n    setChats(prevChats => {\n      let hasChanged = false;\n\n      if (hasChanged === true) {} else return [...prevChats];\n    });\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver;\n      });\n      const name = contact && contact.name || receiver;\n      return {\n        login: receiver.login,\n        name\n      };\n    });\n    const isSelected = index === chatIndex;\n    return { ...chat,\n      receivers,\n      isSelected\n    };\n  });\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ChatsContext","createContext","useChats","ChatsProvider","login","children","chats","setChats","chatIndex","setChatindex","contacts","createChat","receivers","prevChats","messages","sendMessage","message","addMessageToChat","sender","hasChanged","formattedChats","map","chat","index","receiver","contact","find","name","isSelected","value","selectChat","selectedChat"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAAQC,WAAR,QAA0B,8BAA1B;AAEA,MAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,EAArB;AAEA,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAON,UAAU,CAACI,YAAD,CAAjB;AACD;AAED,OAAO,SAASG,aAAT,CAAuB;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAvB,EAA0C;AAE/C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,eAAe,CAAC,OAAD,EAAU,EAAV,CAAzC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM;AAACa,IAAAA;AAAD,MAAaX,WAAW,EAA9B;;AAEA,WAASY,UAAT,CAAoBC,SAApB,EAA+B;AAC7BL,IAAAA,QAAQ,CAACM,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAACD,QAAAA,SAAD;AAAYE,QAAAA,QAAQ,EAAE;AAAtB,OAAf,CAAP;AACD,KAFO,CAAR;AAGD;;AAED,WAASC,WAAT,CAAsBH,SAAtB,EAAiCI,OAAjC,EAA0C;AACxCC,IAAAA,gBAAgB,CAAC;AAACL,MAAAA,SAAD;AAAWI,MAAAA,OAAX;AAAoBE,MAAAA,MAAM,EAAEd;AAA5B,KAAD,CAAhB;AACD;;AAED,WAASa,gBAAT,CAA0B;AAACL,IAAAA,SAAD;AAAWI,IAAAA,OAAX;AAAoBE,IAAAA,MAAM,EAAEd;AAA5B,GAA1B,EAA8D;AAC5DG,IAAAA,QAAQ,CAACM,SAAS,IAAI;AACpB,UAAIM,UAAU,GAAG,KAAjB;;AACA,UAAIA,UAAU,KAAK,IAAnB,EAAyB,CAExB,CAFD,MAGK,OAAO,CAAC,GAAGN,SAAJ,CAAP;AACN,KANO,CAAR;AAOD;;AAGD,QAAMO,cAAc,GAAGd,KAAK,CAACe,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChD,UAAMX,SAAS,GAAGU,IAAI,CAACV,SAAL,CAAeS,GAAf,CAAmBG,QAAQ,IAAI;AAC/C,YAAMC,OAAO,GAAGf,QAAQ,CAACgB,IAAT,CAAcD,OAAO,IAAI;AACvC,eAAOA,OAAO,CAACrB,KAAR,KAAkBoB,QAAzB;AACD,OAFe,CAAhB;AAGF,YAAMG,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6BH,QAA1C;AACA,aAAO;AAACpB,QAAAA,KAAK,EAAEoB,QAAQ,CAACpB,KAAjB;AAAwBuB,QAAAA;AAAxB,OAAP;AACC,KANiB,CAAlB;AAOA,UAAMC,UAAU,GAAGL,KAAK,KAAKf,SAA7B;AACA,WAAO,EAAC,GAAGc,IAAJ;AAAUV,MAAAA,SAAV;AAAqBgB,MAAAA;AAArB,KAAP;AACD,GAVsB,CAAvB;AAYA,QAAMC,KAAK,GAAG;AACZvB,IAAAA,KAAK,EAAEc,cADK;AAEZU,IAAAA,UAAU,EAAErB,YAFA;AAGZsB,IAAAA,YAAY,EAAEX,cAAc,CAACZ,SAAD,CAHhB;AAIZG,IAAAA,UAJY;AAKZI,IAAAA;AALY,GAAd;AAQA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEc,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCxB,QADD,CADF;AAKD","sourcesContent":["import React, {useContext, useState} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from '../contexts/contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {contacts} = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  function sendMessage (receivers, message) {\n    addMessageToChat({receivers,message, sender: login})\n  }\n\n  function addMessageToChat({receivers,message, sender: login}) {\n    setChats(prevChats => {\n      let hasChanged = false;\n      if (hasChanged === true) {\n\n      }\n      else return [...prevChats, ]\n    })\n  }\n\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n    const name = (contact && contact.name) || receiver\n    return {login: receiver.login, name}\n    })\n    const isSelected = index === chatIndex\n    return {...chat, receivers, isSelected }\n  })\n\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}