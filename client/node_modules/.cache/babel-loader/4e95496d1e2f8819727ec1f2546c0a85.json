{"ast":null,"code":"var _jsxFileName = \"/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../hooks/localstorage';\nimport { useContacts } from '../contexts/contactsProvider';\nconst ChatsContext = React.createContext();\nexport function useChats() {\n  return useContext(ChatsContext);\n}\nexport function ChatsProvider({\n  login,\n  children\n}) {\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {\n        receivers,\n        messages: []\n      }];\n    });\n  }\n\n  function sendMessage(receivers, message) {\n    addMessageToChat({\n      receivers,\n      message,\n      sender: login\n    });\n  }\n\n  function equalArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    arr1.sort();\n    arr2.sort();\n    return arr1.every((el, index) => {\n      return el === arr2[index];\n    });\n  }\n\n  function addMessageToChat({\n    receivers,\n    message,\n    sender\n  }) {\n    setChats(prevChats => {\n      const newMessage = {\n        sender,\n        message\n      };\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers, receivers)) {\n          hasChanged = true;\n          return { ...chats,\n            messages: [...chats.messages, newMessage]\n          };\n        }\n\n        return chat;\n      });\n      let hasChanged = false;\n\n      if (hasChanged) {\n        return newChats;\n      } else return [...prevChats, {\n        receivers,\n        messages: [newMessage]\n      }];\n    });\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver;\n      });\n      const name = contact && contact.name || receiver;\n      return {\n        login: receiver.login,\n        name\n      };\n    });\n    const isSelected = index === chatIndex;\n    return { ...chat,\n      receivers,\n      isSelected\n    };\n  });\n  const messages = chat.messages.map(message => {\n    const contact = contacts.find(contact => {\n      return contact.login === message.sender;\n    });\n    const name = contact && contact.name || message.sender;\n    const isFromMe = login === message.sender;\n    return { ...message,\n      senderName: name,\n      isFromMe\n    };\n  });\n  const selected = index === selectedConversationIndex;\n  return { ...conversation,\n    messages,\n    recipients,\n    selected\n  };\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  };\n  return /*#__PURE__*/React.createElement(ChatsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/anastasia/Documents/GitHub/chatbot/src/contexts/chatsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ChatsContext","createContext","useChats","ChatsProvider","login","children","chats","setChats","chatIndex","setChatindex","contacts","createChat","receivers","prevChats","messages","sendMessage","message","addMessageToChat","sender","equalArrays","arr1","arr2","length","sort","every","el","index","newMessage","newChats","map","chat","hasChanged","formattedChats","receiver","contact","find","name","isSelected","isFromMe","senderName","selected","selectedConversationIndex","conversation","recipients","value","selectChat","selectedChat"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react'\nimport useLocalStorage from '../hooks/localstorage';\nimport {useContacts} from '../contexts/contactsProvider'\n\nconst ChatsContext = React.createContext()\n\nexport function useChats() {\n  return useContext(ChatsContext)\n}\n\nexport function ChatsProvider({login, children}) {\n\n  const [chats, setChats] = useLocalStorage('chats', []);\n  const [chatIndex, setChatindex] = useState(0);\n  const {contacts} = useContacts();\n\n  function createChat(receivers) {\n    setChats(prevChats => {\n      return [...prevChats, {receivers, messages: [] }]\n    })\n  }\n\n  function sendMessage (receivers, message) {\n    addMessageToChat({receivers,message, sender: login})\n  }\n\n  function equalArrays(arr1, arr2) {\n    if (arr1.length!==arr2.length) return false\n    arr1.sort();\n    arr2.sort();\n    return arr1.every((el, index) => {\n      return el === arr2[index]\n    })\n  }\n\n  function addMessageToChat({receivers, message, sender}) {\n    setChats(prevChats => {\n      const newMessage = {sender, message}\n      const newChats = prevChats.map(chat => {\n        if (equalArrays(chat.receivers,receivers)) {\n          hasChanged = true\n          return {...chats, messages:[...chats.messages, newMessage]}\n        }\n        return chat\n\n      })\n      let hasChanged = false;\n      if (hasChanged) {\n        return newChats\n      }\n      else return [...prevChats, {receivers, messages: [newMessage]}]\n    })\n  }\n\n  const formattedChats = chats.map((chat, index) => {\n    const receivers = chat.receivers.map(receiver => {\n      const contact = contacts.find(contact => {\n        return contact.login === receiver\n      })\n    const name = (contact && contact.name) || receiver\n    return {login: receiver.login, name}\n    })\n    const isSelected = index === chatIndex\n    return {...chat, receivers, isSelected }\n  })\n\n  const messages = chat.messages.map(message => {\n    const contact = contacts.find(contact => {\n      return contact.login === message.sender\n    })\n    const name = (contact && contact.name) || message.sender\n    const isFromMe = login === message.sender\n    return { ...message, senderName: name, isFromMe }\n  })\n\n  const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n\n  const value = {\n    chats: formattedChats,\n    selectChat: setChatindex,\n    selectedChat: formattedChats[chatIndex],\n    createChat,\n    sendMessage\n  }\n\n  return (\n    <ChatsContext.Provider value={value}>\n    {children}\n    </ChatsContext.Provider>  \n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}